package com.eleven.Q11_盛最多的水.A1;

/**
 * 11. 盛最多水的容器
 * 难度
 * 中等
 *
 * 给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点(i, ai) 。在坐标内画 n 条垂直线，垂直线 i的两个端点分别为(i, ai) 和 (i, 0) 。找出其中的两条线，使得它们与x轴共同构成的容器可以容纳最多的水。
 *
 * 说明：你不能倾斜容器。
 *
 * 示例 1：
 *
 * 输入：[1,8,6,2,5,4,8,3,7]
 * 输出：49
 * 解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为49。
 * 示例 2：
 *
 * 输入：height = [1,1]
 * 输出：1
 * 示例 3：
 *
 * 输入：height = [4,3,2,1,4]
 * 输出：16
 * 示例 4：
 *
 * 输入：height = [1,2,1]
 * 输出：2
 *
 * 提示：
 *
 * n = height.length
 * 2 <= n <= 3 * 104
 * 0 <= height[i] <= 3 * 104
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/container-with-most-water
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */

/** 解法1
 * 时间复杂度 O(n^2), 超时...
 *
 * 暴力解法 枚举
 * 枚举数组，记录最大的值
 */
public class Solution {

    public static int maxArea(int[] height) {
        int area = 0;

        for (int i = 0; i < height.length - 1; ++i) {
            for (int j = i + 1; j < height.length; ++j) {
                int tmp = (j - i) * Math.min(height[i], height[j]);
                area = Math.max(tmp, area);
            }
        }

        return area;
    }


    public static void main(String[] args) {
//        int[] nums = {4, 3, 2, 1, 4};
//        int[] nums = {1, 8, 6, 2, 5, 4, 8, 3, 7};
        int[] nums = {8361,5302,8672,2400,5150,3527,9216,6713,2902,310,555,9176,311,9968,5705,3983,7992,8553,6953,9541,5828,1750,6731,3552,5274,7303,3724,5387,9504,1900,937,1146,7266,7943,7911,9055,8046,7180,6516,7810,686,5210,1956,4540,7540,2083,1579,4260,2450,2527,6524,5723,6766,777,5694,6018,2880,3653,6011,8172,5943,2862,6594,2902,9887,5878,3065,8197,9195,4560,3428,2209,475,852,9488,3368,4319,6230,1975,5829,9474,4490,2067,6048,9136,5344,6022,1787,5553,140,5130,524,3450,4008,721,6154,5598,8219,4614,3404,8232,9023,4552,7711,6057,5324,8578,3595,4663,4,3703,1429,7921,3085,3694,1461,8932,2632,7046,801,6043,617,7565,3469,1627,1464,3050,7982,6702,5467,8604,5515,9155,3260,5040,313,8885,929,4103,7947,1139,702,1047,2889,1439,3945,4738,2462,8491,7699,376,4639,1329,3644,7408,3665,7417,1388,861,7510,7908,4568,2618,4565,7222,2003,1586,9494,1744,7997,7389,9476,2752,701,5925,4963,6859,1634,7170,1336,1514,6757,698,5123,4390,7910,7527,9520,156,6402,1428,789,3411,106,3206,8216,700,994,337};

        int a = maxArea(nums);

        System.out.println(a);
    }
}
